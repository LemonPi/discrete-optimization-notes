-----------------------------------------------------------
    Computational paradigm
-----------------------------------------------------------
- use constraints to reduce set of values each variable can take
	- remove values that can't appear in any solution
	- implemented by propagation engine at core of any constraint solver
- make a choice when no deduction can be performed
	- choice is assigning a value to a variable (current understanding)

-----------------------------------------------------------
    Features
-----------------------------------------------------------
- can model problem at a very high level
	- various ways to model each problem
- complete
- optimal (not a heuristic)

-----------------------------------------------------------
    Examples
-----------------------------------------------------------
- 8 queens problem
	- each column is a decision variable
		- variable value is row of queen
	- constraints
		- for i,j in R, i < j
		- same row
			- row[i] != row[j]
		- upward diagonal
			- row[i] != row[j] + (j - i)
		- downward diagonal
			- row[i] != row[j] - (j - i)
- SEND MORE MONEY
	- assign each letter a digit to replace it such that 
	   SEND 
	+  MORE 
	= MONEY
	- one simple model (not the best)
		- each letter is a decision variable
			- domain is 0..9
		- each carry (C1..C4) is a decision variable
			- domain is 0..1
		- constraints
			- value[i] != value[j] for each letter assignment
			- value[S] != 0
			- value[M] != 0
			- carry[4] == value[M]
			- carry[3] + value[S] + value[M] == value[O] + 10*carry[4]
			...

-----------------------------------------------------------
    Steps
-----------------------------------------------------------
1. choose decision variables
2. determine the #domain# of each variable
	- the #domain# is the set of values that a variable can take on
3. express constraints in terms of the decision variables

-----------------------------------------------------------
    Constraint
-----------------------------------------------------------
- indepdendent of each other
- acts on domain store (set of domains of all variables)
- 2 responsibilities
	1. feasiblity checking
		- given current domains, can this constraint be satisfied by any variable assignment?
	2. pruning
		- to be satisfied, have to remove values that cannot be part of any solution
- each type of constraint has dedicated algorithms to implement those responsibilities
	- exploit the structure and properties of the constraint