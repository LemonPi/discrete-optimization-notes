-----------------------------------------------------------
    Overview
-----------------------------------------------------------
- used to speed up models tremendously
- semantically redundant
	- do not exclude any solutions
- reduces search space
- express properties of solution not captured by model

-----------------------------------------------------------
    Examples
-----------------------------------------------------------
- magic series S = (S0..Sn) is magic if Si is the number of occurrences of i in S
	eg. 2, 1, 2, 0, 0
		- S0 = 2 (S3, S4)
		- S1 = 1 (S1)
	- model
		int n = 5
		range D = 0..n-1
		var{int} series[D] in D

		solve
		forall(k in D)
			series[k] = sum(i in D) (series[i]=k)
	- must have n occurrences in total
		sum(i in D) series[i] = n
	- consider another requirement
		- series[i] = x means there are x occurrences of i
		- sum(i in D) series[i] = sum(i in D) i * series[i]
		sum(i in D) i * series[i] = n
- car sequencing
	- cars require specific options
		eg. leather seats, moonroof
	- capacity constraints
		eg. at most 2 out of 5 consecutive cars can have moonroofs
	- a set of options make up a configuration
	- model
		range Slots = ...
		range Configs = ...
		range Options = ...
		int demand[Configs] = ...
		int nbCars = sum(c in Configs) demand[ c ]
		// fraction of capacity constraint eg. 2/5 -> lb = 2, ub = 5
		int lb[Options] = ...
		int ub[Options] = ...
		int requires[Options, Config] = ...
		// what configuration to produce at this slot
		var{int} line[Slots] in Configs
		// auxillary variable - setup[o,s]=1 if slot[s] has a car requiring option o
		var{int} setup[Options, Slots] in 0..1

		solve
		// demand constraint (have to satisfy demands)
		forall(c in Configs)
			(sum(s in Slots) (line[ s ] = c)) = demand[ c ]

		// define setup variable
		forall(s in Slots, o in Options)
			setup[o,s] = requires[o, line[ s ]]

		// capacity constraints
		forall(o in Options, s in 1..nbCars-ub[o]+1)
			(sum(j in s..s+ub[o]-1) setup[o,j]) <= lb[o]
	- leads to a lot of cases where model tries to produce all cars at the end slots
		- leads to a lot of backtracking
	- instead can work backwards from the right side
	- needs remaining left side to be able to produce total demand - what can be produced at right
		forall(o in Options, i in 1..demand[o])
			(sum(s in 1..nbCars-i*ub[o]) setup[o,s]) >= demand[o] - i*lb[o]


-----------------------------------------------------------
    Surrogate constraints
-----------------------------------------------------------
- combination of existing constraints
	- such as through linear combination
- improves global view/communication between constraints
