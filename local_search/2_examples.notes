-----------------------------------------------------------
    Car sequencing
-----------------------------------------------------------
- capacity violations
	- each option has a capacity expressed as M/N
		- M units in time N
		eg. 2/3
	- evaluate violations by sliding a window of size N along time
- neighbourhood
	- swap 2 configuration (car)
	- swap instead of assignment
		- automatically maintain demand constraint
		- illustrates hard and soft constraints
			- hard must always be satisfied by local search
			- soft can be gradually resolved

-----------------------------------------------------------
    Magic square
-----------------------------------------------------------
- hard constraint is all different
	- keep satisfied by swapping
- soft constraints are the sum equalities
- 0/1 violations are pretty useless
	- most moves won't change whether they're violated or not
	- results in random walk
- use abs(l - r) to measure degree of violation
	- can move towards less violation

-----------------------------------------------------------
    Warehouse location
-----------------------------------------------------------
- set of fixed warehouses W each with fixed cost f_w for opening/maintaining
- set of customers C
- transformation cost t_wc from warehouse w to customer c
- no constraints (apart from a customer has to be connected to a warehouse)
- decision variables
	- o_w whether warehouse w is open (0/1)
	- a[ c ] the warehouse assigned to customer c
- objective
	- minimize sum{w E W} f_w * o_w + sum{c E C} t_a[ c ]c
- once which warehouses should be open is decided, easy to select a[ c ]
	- select warehouse with lowest t_wc since there are no capacity constraints
- neighbourhood
	- simplest is to flip the value of some o_w
	- swap configuration of two o_w


-----------------------------------------------------------
    Travelling salesman
-----------------------------------------------------------
- set of cities
- symmetric distance matrix from each city to another
- must complete a circuit as the constraint
	- can ignore this constraint if we always ensure this is true
- interesting question is what a neighbourhood is
- crossings are bad
- neighbourhoods
	- 2-OPT
		- select 2 edges and replace them by 2 other edges
		- stay feasible (maintains a tour)
		- replacement edges need to involve the same ones removed
		- have to fix edge direction of some edges after replacement
	- 3-OPT
		- nieghbourhood is set of all tours that can be reached by swapping 3 edges
		- much better than 2-OPT in quality but more expensive
	- 4-OPT
		- marginally better but much more expensive
	- K-OPT
		- search for a favourable sequence of swaps
		- incrementally build sequence
		- explore a sequence of swaps of increasing size
		- compute cost but do not connect
			- of a 2-OPT, 3-OPT, ...
			- each restart use the vertices that would've been affected by the swap
		- select optimal subsequence 